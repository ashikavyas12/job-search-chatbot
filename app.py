# -*- coding: utf-8 -*-
"""job ai

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hdr7BVYMfHVJDnBqgLUNleSnA8Wrsc7B
"""

!pip install -q langchain langchain-community requests
!pip install -q google-cloud-aiplatform

!pip install streamlit -q

!wget -q -O - ipv4.icanhazip.com

!pip install -q google-cloud-aiplatform langchain-google-vertexai

!pip install langchain -q
!pip install langchain-google-genai -q
!pip install langchain-openai -q
!pip install langchain-community -q

import streamlit as st
print("Streamlit is installed and ready.")

import sqlite3
import datetime
import json
import re
from typing import List, Dict

def search_mock_jobs(query: str, location: str = "") -> List[Dict]:
    sample_jobs = [
        {
            "title": f"{query} Developer",
            "company": "Tech Company A",
            "location": location or "Remote",
            "description": f"Looking for experienced {query} developer",
            "url": "https://example.com/job/1",
            "posted_date": "2025-06-01",
            "skills": [query.lower(), "python", "javascript"]
        },
        {
            "title": f"Senior {query}",
            "company": "Startup B",
            "location": location or "San Francisco, CA",
            "description": f"Senior {query} position with growth opportunities",
            "url": "https://example.com/job/2",
            "posted_date": "2025-06-02",
            "skills": [query.lower(), "react", "node.js"]
        }
    ]
    return sample_jobs

def simple_resume_parser(resume_text: str) -> Dict:
    skills_keywords = [
        'python', 'javascript', 'java', 'react', 'node.js', 'sql',
        'html', 'css', 'aws', 'docker', 'kubernetes', 'git',
        'machine learning', 'data science', 'ui/ux', 'design'
    ]

    text_lower = resume_text.lower()
    found_skills = [skill for skill in skills_keywords if skill in text_lower]

    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    phone_pattern = r'(\+?\d{1,3}[-.\s]?)?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}'

    emails = re.findall(email_pattern, resume_text)
    phones = re.findall(phone_pattern, resume_text)

    return {
        "skills": found_skills,
        "email": emails[0] if emails else "Not found",
        "phone": phones[0] if phones else "Not found",
        "text_length": len(resume_text),
        "word_count": len(resume_text.split())
    }

def init_db():
    conn = sqlite3.connect('job_search.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS saved_jobs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT,
                    company TEXT,
                    location TEXT,
                    description TEXT,
                    url TEXT,
                    saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

def save_job(job_data: Dict):
    conn = sqlite3.connect('job_search.db')
    c = conn.cursor()
    c.execute("""INSERT INTO saved_jobs (title, company, location, description, url)
                 VALUES (?, ?, ?, ?, ?)""",
              (job_data.get('title', ''), job_data.get('company', ''),
               job_data.get('location', ''), job_data.get('description', ''),
               job_data.get('url', '')))
    conn.commit()
    conn.close()

def get_saved_jobs():
    conn = sqlite3.connect('job_search.db')
    c = conn.cursor()
    c.execute("SELECT * FROM saved_jobs ORDER BY saved_at DESC")
    jobs = c.fetchall()
    conn.close()
    return jobs

init_db()

# Search Jobs
query = input("Enter job role (e.g., Python Developer): ")
location = input("Enter location (or leave blank for Remote): ")
results = search_mock_jobs(query, location)

print(f"\nFound {len(results)} job(s):\n")
for i, job in enumerate(results):
    print(f"{i+1}. {job['title']} at {job['company']} - {job['location']}")
    print(f"   Description: {job['description']}")
    print(f"   URL: {job['url']}")
    print(f"   Skills: {', '.join(job['skills'])}")
    save = input("   Save this job? (y/n): ")
    if save.lower() == 'y':
        save_job(job)
        print("   âœ… Saved!")
    print()

# Resume Analysis
resume_text = input("\nPaste your resume text:\n")
parsed = simple_resume_parser(resume_text)

print("\nðŸ“Š Resume Analysis:")
print(f"Email: {parsed['email']}")
print(f"Phone: {parsed['phone']}")
print(f"Word Count: {parsed['word_count']}")
print(f"Character Count: {parsed['text_length']}")
print(f"Skills Found: {', '.join(parsed['skills']) or 'None'}")

# Saved Jobs
print("\nðŸ’¾ Saved Jobs in DB:")
saved = get_saved_jobs()
for job in saved:
    print(f"- {job[1]} at {job[2]} ({job[3]}) - saved on {job[6]}")
